@implements IDisposable

<style type="text/css">
    .error-overlay {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        top: 0;
        background: black;
        opacity: 0.25;
        z-index: 5000;
    }

    .error-content {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        top: 0;
        background: transparent;
        z-index: 5001;
    }
</style>


@if (Exceptions.Count > 0)
{
    <div class="error-overlay"></div>

    <div class="error-content d-grid" style="place-content: center">
        <div class="card">
            <div class="card-header bg-danger text-white">
                <h5 class="m-0">Unexpected Error</h5>
            </div>
            <div class="card-body">
                <p>Oops, unexpected error occured!</p>
                <p>There are @Exceptions.Count error(s) occured.</p>
                @foreach (var Error in Exceptions)
                {
                    <pre class="bg-secondary p-3" style="--bs-bg-opacity: 0.25">@Error.Message</pre>
                    <hr />
                }
            </div>
            <div class="card-footer d-flex">
                <button type="button" class="btn btn-secondary ms-auto" @onclick="OnHandle">OK</button>
            </div>
        </div>
    </div>


}

@code {

    List<Exception> Exceptions = new List<Exception>();

    protected override void OnInitialized()
    {
        ErrorNotificaitonService.OnExceptionListChange += ErrorNotificaitonService_OnError;
    }

    private void ErrorNotificaitonService_OnError()
    {
        Exceptions = ErrorNotificaitonService.GetExceptions();
        StateHasChanged();
    }

    private void OnHandle()
    {
        Exceptions = new List<Exception>();
        StateHasChanged();
    }

    public void Dispose()
    {
        ErrorNotificaitonService.OnExceptionListChange -= ErrorNotificaitonService_OnError;
    }
}
